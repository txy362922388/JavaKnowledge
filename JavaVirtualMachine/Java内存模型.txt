#Java内存区域与内存溢出异常

Java虚拟机运行时数据区域(JMM)包括:方法区、堆、虚拟机栈、本地方法栈和程序计数器。其中，前两者线程共享，
后两者线程隔离。

程序计数器：当前线程所执行字节码的行号指示器，通过改变字节码的计数器的值来选取下一条需要执行字节码的指
令。多线程轮流切换的过程中，为了保证线程切换后能恢复到正确的执行位置，每个线程需要有一个独立的程序技术
器。程序计数器本质上记录的是虚拟机字节码指令的地址。

Java虚拟机栈：描述Java方法执行的内存模型，每个方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数
栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程就对应这一个栈帧在虚拟机中入栈和出栈的
过程。

本地方法栈：作用与虚拟机栈相似，区别在于虚拟机栈为虚拟机执行Java方法，而本地方法栈为虚拟机执行Native方
法服务。

堆:Java虚拟机所管理的内存中最大的一块，所有对象实例和数组都在堆上分配(不考虑逃逸分析)。Java堆是垃圾收集
器管理的主要区域。目前GC基本采用分代回收的算法，因此堆可分为新生代和老年代，再细分可分为Edne空间、From
Survivor空间和To Survivor空间。Java堆可以处于物理不连续的空间，只要是逻辑连续即可。

方法区：存储已被虚拟机加载的类信息、常量、静态变量和即时编译器编译后的代码数据。方法区再HotSpot虚拟机
上习惯被称作“永久代”，相比于堆，方法区很少发生GC的行为。

运行时常量池：是方法区的一部分，用于存放编译期生成的各种字面量和符号引用。常量不一定只有在编译期产生，
例如String类中的intern方法

直接内存：JDK1.4中的NIO类引入了一种基于通道与缓冲区的I/O方式，可以使用native函数库直接分配堆外内存，
然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。直接内存会受到本机总内存
大小和处理器寻址空间的限制。
