#Java内存区域与内存溢出异常

Java虚拟机运行时数据区域(JMM)包括:方法区、堆、虚拟机栈、本地方法栈和程序计数器。其中，前两者线程共享，
后两者线程隔离。

程序计数器：当前线程所执行字节码的行号指示器，通过改变字节码的计数器的值来选取下一条需要执行字节码的指
令。多线程轮流切换的过程中，为了保证线程切换后能恢复到正确的执行位置，每个线程需要有一个独立的程序技术
器。程序计数器本质上记录的是虚拟机字节码指令的地址。

Java虚拟机栈：描述Java方法执行的内存模型，每个方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数
栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程就对应这一个栈帧在虚拟机中入栈和出栈的
过程。

本地方法栈：作用与虚拟机栈相似，区别在于虚拟机栈为虚拟机执行Java方法，而本地方法栈为虚拟机执行Native方
法服务。

堆:Java虚拟机所管理的内存中最大的一块，所有对象实例和数组都在堆上分配(不考虑逃逸分析)。Java堆是垃圾收集
器管理的主要区域。目前GC基本采用分代回收的算法，因此堆可分为新生代和老年代，再细分可分为Edne空间、From
Survivor空间和To Survivor空间。Java堆可以处于物理不连续的空间，只要是逻辑连续即可。

方法区：存储已被虚拟机加载的类信息、常量、静态变量和即时编译器编译后的代码数据。方法区再HotSpot虚拟机
上习惯被称作“永久代”，相比于堆，方法区很少发生GC的行为。

运行时常量池：是方法区的一部分，用于存放编译期生成的各种字面量和符号引用。常量不一定只有在编译期产生，
例如String类中的intern方法

直接内存：JDK1.4中的NIO类引入了一种基于通道与缓冲区的I/O方式，可以使用native函数库直接分配堆外内存，
然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。直接内存会受到本机总内存
大小和处理器寻址空间的限制。

对象在堆上的创建过程：接收到new指令->检查引用代表的类是否被加载、解析和初始化->分配内存(根据内存区域
是否连续分为指针碰撞和空闲列表)内存的分配规则基于所选的垃圾收集器->在分配空间的同时考虑并发的问题，在
给A对象分配空间的同时指针还没来及修改而同时在给对象B分配空间的仍然采用原来的指针，其对应的采取策略是
采用CAS和TLAB->将内存空间初始化为0值->设置对象的实例归属、类的元数据信息、对象的哈希码、对象的GC分代
年龄信息到对象头(Obeject Header)中

对象的内存布局：包括对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)。对象头第一部分用于存储
对象自身的运行时数据(哈希码、GC分代年龄、所锁状态标志)，在32位和64位虚拟机分别对应32位和64位，称为Mark
Word。对象头的第二部分是类型指针，即指向它的类元数据的指针。实例数据是对象真正存储的有效信息。对齐填充
保证对象的大小是8字节的整数倍。

对象的访问定位：通过栈上的reference数据来操作堆上的具体对象，目前对象的访问方式主要包括句柄访问和直接
指针。句柄访问将会在Java堆中划分出一块内存来作为句柄池，那么reference中存储的就是对象的句柄地址，而句
柄中包含了对象实例数据与类型数据各自的具体地址信息。如果使用直接指针访问，那么Java对象布局中就必须考虑
如何放置访问类型数据的相关信息，而reference存储的直接就是对象地址。句柄访问的优点在于若对象发生移动时
只会改变对象实例数据的指针而reference本身不需要修改，而直接访问方式最大的好处在于速度更快，节省了一次
指针定位的时间开销。

OOM异常：
*堆：配置-Xms和-Xmx可以设置堆的最小值参数和最大值参数，配置-XX:+HeapDumpOnOutOfMemoryError使得在
内存溢出异常时候Dump当前内存堆转储快照用于事后分析。
*虚拟机栈和本地方法栈：栈容量通过-Xss设定。若线程请求的栈深度大于虚拟机所允许的最大深度，将抛出
StackOverflowError的异常。如果虚拟机在扩展栈时无法申请到足够的内存空间，那么抛出OutOfMemoryError
的异常。其实StackOverflowError的原因不仅是通常的无尽的递归方法调用问题，而且还包括了线程不停地
创建，若对于每个线程的栈分配的内存越大，那么越容易产生内存溢出的异常。原因是每个线程分配得到的
栈容量越大，那么可以建立的线程数量自然越少，建立线程时就越容易把剩下的内存耗尽。
*方法区和运行时常量池：方法区大小限制--XX:PermSize和-XX:MaxPermSize来限制其大小。
public class Main {
    public static void main(String[] args){
        String s1 = new StringBuilder("Computer").append("Science").toString();
        String s2 = new StringBuilder("ja").append("va").toString();
        System.out.println(s1.intern() == s1);//jdk1.6 false jdk1.7 true
        System.out.println(s2.intern() == s2);//jdk1.6 false jdk1.7 false
    }
}
上面这个例子还蛮trick的，在jdk1.6中intern方法会把首次遇到的字符串实例复制到永久代中，返回的是指向
这个永久代的引用，而通过StringBuilder创建的字符串实例在java堆上，因此必然不是同一个引用。到了jdk1.7
中，intern方法不再复制实例，只是在常量池中记录首次出现的实例引用，因此intern返回的引用和由StringBuilder
创建的字符串实例是同一个。
*本机直接内存溢出：直接内存容量可以通过-XX：MaxDirectMemorySize指定，默认等于-Xmx

#垃圾收集器GC与内存分配策略

GC的对象：
程序计数器、虚拟机栈和本地方法栈随线程而生，随线程而灭，因此不纳入GC的考虑。GC所关注的重点内存区域主要是
堆和方法区，而后续讨论的‘内存’指的是堆和方法区。

堆中对象‘存活’或‘死亡’的判断方法：
*引用计数法：给每个对象添加一个引用计数器，每当有一个地方引用时，计数器加1，引用失效时，计数器减1，任何
计数器为0的对象是不可能再被使用的。然而，主流的Java没有采用引用计数法来管理内存，原因是因为该方法很难解
决对象之间相互循环引用的问题。
*可达性分析算法：通过GC Roots对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个
对象到GC Roots没有任何引用链时，则证明此对象是不可用的。GC Roots的对象包括虚拟机栈中引用的对象，方法区中
类静态属性引用的对象，方法区中常量引用的对象和本地方法栈中JNI引用的对象。

引用的分类(引用强度按顺序依次递减)：
*强引用：代码中普遍存在的是强引用，类似于Object obj = new Obeject();只要强引用还在，GC永远不会去回收被引用的对象。
*软引用：用SoftReference来实现，描述有用但非必需的对象，对于软引用关联的对象，在系统发生内存溢出异常之前，将会把
这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。
*弱引用：用WeakReference来实现，描述非必须对象的，强度比软引用更弱一些，被弱引用关联的对象只会生存到下一次GC之前
而与内存是否溢出无关
*虚引用：用PhantomReference来实现，又叫幽灵引用或者幻影引用，是一种最弱的引用关系，虚引用的存在不会对对象的生存时
间构成影响，也无法通过虚引用来获取一个对象的实例，其唯一目的使得对象在被GC时收到一个系统通知。
总结：引用的强弱影响的是对对象的GC，只要强引用存在，永不GC，当内存即将溢出，对软引用GC,弱引用的将在接下来被GC,虚
引用不影响GC。


